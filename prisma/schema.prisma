generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String @id @default(uuid())
  email       String   @unique
  username    String   @unique
  displayName String?
  bio         String?
  location    String?
  job         String?
  website     String?
  img         String?
  cover       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts      Post[]
  likes      Like[]
  saves      SavedPosts[]
  lists      List[]
  savedLists SavedLists[]
  comments   Comment[]

  followers  Follow[] @relation("UserFollowers")
  followings Follow[] @relation("UserFollowings")
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  desc        String?  @db.VarChar(255)
  img         String?
  imgHeight   Int?
  video       String?
  isSensitive Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  rePostId Int?
  rePost   Post?  @relation("RePosts", fields: [rePostId], references: [id])
  rePosts  Post[] @relation("RePosts")

  likes Like[]
  saves SavedPosts[]
  comments Comment[]
}

model SavedPosts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}


model List {
  id        Int      @id @default(autoincrement())
  title     String
  desc      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  items    ListItem[]
  likes Like[]
  comments Comment[]
  savedBy  SavedLists[]
  
  rePostListId Int?
  rePostList   List? @relation("ReList", fields: [rePostListId], references: [id])
  reLists      List[] @relation("ReList")
}

model ListItem {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(155)
  position  Int      // position 1â€“10

  listId Int
  list   List @relation(fields: [listId], references: [id])

  @@unique([listId, position]) // Ensure only one item per position per list
}

model SavedLists {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId String
  listId Int

  user User @relation(fields: [userId], references: [id])
  list List @relation(fields: [listId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User @relation(fields: [userId], references: [id])

  postId Int?
  post   Post? @relation(fields: [postId], references: [id])

  listId Int?
  list   List? @relation(fields: [listId], references: [id])
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId String
  user User @relation(fields: [userId], references: [id])

  postId Int?
  post   Post? @relation(fields: [postId], references: [id])

  listId Int?
  list   List? @relation(fields: [listId], references: [id])

}


model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowings", fields: [followingId], references: [id])
}